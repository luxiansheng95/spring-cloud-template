<?xml version="1.0" encoding="UTF-8"?>

<!--文档地址：https://logback.qos.ch/manual/layouts.html-->
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下每个dtolter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。100000：10s -->
<configuration scan="true" scanPeriod="100000">
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->
    <!--保存路径-->
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/log.log}"/>

    <!--日志输出格式-->
    <!--<property name="FILE_LOG_PATTERN" value="[%highlight(%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level)] [%thread] %cyan(%logger) %L %M - %msg%n"/>-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr([%L]){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} [%L] %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--单个文件最大值-->
    <property name="LOG_FILE_MAX_SIZE" value="10MB"/>

    <!-- 控制台输出日志 -->
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!-- 文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>

        <!--按天生成文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}/%d{yyyyMM, aux}/%d{yyyyMMdd}.%i.log</fileNamePattern>
            <maxFileSize>${LOG_FILE_MAX_SIZE:-10MB}</maxFileSize>
            <maxHistory>${LOG_FILE_MAX_HISTORY:-0}</maxHistory>
        </rollingPolicy>
    </appender>

    <!--启动优化-->
    <logger name="org.springframework.jmx.export.annotation.AnnotationMBeanExporter" level="WARN"/>
    <logger name="com.netflix.config.sources.URLConfigurationSource" level="WARN"/>
    <logger name="com.netflix.discovery.provider.DiscoveryJerseyProvider" level="WARN"/>
    <logger name="com.netflix.discovery.DiscoveryClient" level="WARN"/>
    <logger name="org.springframework.context.support.PostProcessorRegistrationDelegate" level="WARN"/>
    <logger name="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" level="WARN"/>
    <logger name="org.springframework.boot.web.servlet.FilterRegistrationBean" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping" level="WARN"/>
    <logger name="org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter" level="WARN"/>
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="DEBUG"/>
    <logger name="com.cloud.config.client" level="DEBUG"/>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>

</configuration>
